<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--
        每个logger都关联到logger上下文，默认上下文名称为“default”。
        但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
    -->
    <contextName>palmer-logback</contextName>
    <!--
    property可以用来设置变量，可以通过${name}来访问，有以下的属性:
    a. name，用于${name}访问的key
    b. value，用于${name}访问的value
    c. file ，用于指定配置文件的路径，他的作用在于，如果你有多个配置信息的话，可以直接写在配置文件中，然后通过file引入:
        <property file="src/main/java/chapters/configuration/variables.properties" />
    d.resource作用和file一样，但是，它是可以直接从classpath路径下引入配置文件:
        <property resource="resource.properties" />
    -->
    <property name="log.parent.path" value="/Users/xcj/testAllIn/data/log"></property>

    <!--控制台输出 -->
    <!--
    <appender>是<configuration>的子节点，是负责写日志的组件。
    <appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        <encoder>：
        负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。
        目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<pattern>节点，用来设置日志的输入格式。
        使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。
        -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method\(\):%L -%msg%n</Pattern>
        </encoder>
    </appender>

    <!-- 用来保存输出所有级别的日志 -->
    <appender name="FILE.ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
        RollingFileAppender 的file 子节点可有可无，通过设置file，可以为活动文件和归档文件制定不同位置，当前日志总是纪录到file指定的文件，活动文件的名称不会改变，
        如果没有设置file，活动文件的名称会根据fileNamePattern的值，每隔一段时间改变一次，“／”或者“\” 会被当作目录分隔符。
        -->
        <File>${log.parent.path}/all/active/test.log</File>
        <!-- 设置日志不超过${log.max.size}时的保存路径，注意如果
			是web项目会保存到Tomcat的bin目录下 -->
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            必须包含“%i” 例如：设置最小值，和最大值分别为1和2，命名模式为 log%i.log,会产生归档文件log1.log和log2.log，
            还可以指定文件压缩选项，例如：log％i.log.gz 或者 log%i.log.zip
            -->
            <FileNamePattern>${log.parent.path}/all/archive/test_%d{yyyy-MM-dd}.%i.log.zip</FileNamePattern>
            <!--maxHistory的值为指定${log.parent.path}/all/archive/目录下存在的文件的最大个数，当超过时会删除最早的文件-->
            <maxHistory>31</maxHistory>
            <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
            <!--
            此外，策略还可以互相嵌套，比如本例中在时间策略中又嵌套了文件大小策略，ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP实现对单文件大小的判断，
            当超过maxFileSize中指定大大小时，文件名中的变量%i会加一
            -->
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出的文件的格式 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method\(\):%L -%msg%n</pattern>
        </layout>
    </appender>

    <!-- 只用保存输出error级别的日志 -->
    <appender name="FILE.ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <File>${log.parent.path}/error/active/test.log</File>
        <!--<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。-->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.parent.path}/error/archive/${log.moduleName}_err_%d{yyyy-MM-dd}.%i.log.zip
            </FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method\(\):%L - %msg%n</pattern>
        </layout>
        <!--
        Logback 的过滤器基于三值逻辑（ternary logic），允许把它们组装或成链，从而组成任 意的复合过滤策略。
        这里的所谓三值逻辑是说，过滤器的返回值只能是 ACCEPT、DENY 和 NEUTRAL 的其中一个。
        -->
        <!--
        下面为配置只输出error级别的日志
        LevelFilter 根据记录级别对记录事件进行过滤。如果事件的级别等于配置的级别，过滤 器会根据 onMatch 和 onMismatch 属性接受或拒绝事件。
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 为某个包下的所有类的指定Appender 这里也可以指定类名称例如：com.aa.bb.ClassName -->
    <!--
    用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
    <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
        name:
        用来指定受此loger约束的某一个包或者具体的某一个类。
        level:
        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity:
        是否向上级loger传递打印信息。默认是true。
    <loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
    -->
    <!--<logger name="com.paler.demo.logger" additivity="false">-->
        <!--<level value="INFO" />-->
        <!--<appender-ref ref="stdout" />-->
        <!--<appender-ref ref="file.async" />&lt;!&ndash; 即com.lin包下级别为 ${log.root.level}的才会使用file.async来打印 &ndash;&gt;-->
        <!--<appender-ref ref="file.error" />-->
    <!--</logger>-->

    <!--
    也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
    level:
    用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    默认是DEBUG。
    <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
    -->
    <root>
        <level value="INFO" />
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE.ALL" />
        <appender-ref ref="FILE.ERROR" />
    </root>
</configuration>